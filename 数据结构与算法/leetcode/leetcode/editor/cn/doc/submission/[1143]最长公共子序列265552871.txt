/**
 * @param {string} text1
 * @param {string} text2
 * @return {number}
 */
var longestCommonSubsequence = function(text1, text2) {
    const memo = new Array(text1.length).fill(-1).map(() => new Array(text2.length).fill(-1))
    return dp(text1, 0, text2, 0);
    
    function dp(text1, i, text2, j) {
        if (i === text1.length || j === text2.length) {
            return 0
        }
        if (memo[i][j] !== -1) return memo[i][j];
    
        if (text1[i] === text2[j]) {
            memo[i][j] = 1 + dp(text1, i + 1, text2, j + 1)
        } else {
            memo[i][j] = Math.max(dp(text1, i + 1, text2, j), dp(text1, i, text2, j + 1))
        }
    
        return memo[i][j];
    }
};
//runtime:88 ms
//memory:55.2 MB
