/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
 var solve = function(board) {
    // 从边界的'0'出发，找出与之直接或间接相连的'0'，标记
    // 遍历完后，对于被标记的'0'，将其还原成'0'；对于未标记的'0'，将其改为'X'
    let m = board.length, n = board[0].length;
    // m表示行数 n表示列数
    for (let i = 0; i < m; i++) {
        dfs(board, i, 0); // 0,0  1,0 2,0
        dfs(board, i, n - 1);
    }

    for (let j = 0; j < n; j++) {
        dfs(board, 0, j)
        dfs(board, m - 1, j)
    }

    function dfs(board, x, y) {
        if (x < 0 || x >= m || y < 0 || y >= n) return;
        if (board[x][y] === 'A' || board[x][y] === 'X') return;
        if (board[x][y] === 'O') board[x][y] = 'A';

        dfs(board, x - 1, y)
        dfs(board, x + 1, y)
        dfs(board, x, y - 1)
        dfs(board, x, y + 1)
    }

    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (board[i][j] === 'A'){
                board[i][j] = 'O'
            } else if (board[i][j] === 'O') {
                board[i][j] = 'X'
            }
        }
    }

};
//runtime:76 ms
//memory:41.4 MB
