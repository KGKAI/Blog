/**
 * @param {number[]} arr
 * @param {number} k
 * @return {number[]}
 */
var getLeastNumbers = function(arr, k) {
    if (arr.length <= k) return arr
    return quickSearch(arr, 0, arr.length - 1, k)
};
function quickSearch(arr, from, to, k) {
    let j = quickSort(arr, from, to, k)
    if (j === k || j === -1) {
        return arr.slice(0, k)
    }

    return j > k ? quickSearch(arr, from, j -1, k) : quickSearch(arr, j + 1, to, k)
}

function quickSort(arr, from, to) {
    let i = from, j = to, key = arr[from]
    if (from >= to) return -1
    while (i < j) {
        while(i < j && arr[j] > key) j--
        while(i < j && arr[i] <= key) i++

        if (i < j) {
            let temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp
        }
    }
    arr[from] =arr[i]
    arr[i] = key

    return j
}
//runtime:140 ms
//memory:40.4 MB
