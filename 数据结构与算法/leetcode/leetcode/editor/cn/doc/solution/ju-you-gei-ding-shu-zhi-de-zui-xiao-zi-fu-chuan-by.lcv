#### 方法一：贪心算法

**思路与算法**

由于我们要使得构造出的字符串字典序最小，因此可以考虑贪心地从字符串的开头处开始构造，每次选择一个**满足要求的最小的字母**，即可得到最终答案。

那么怎样选择字母才是满足要求的呢？假设我们当前构造到了某一个位置，包括此位置还剩下 $n'$ 个位置没有放入字符，并且这些位置的数值之和为 $k'$，那么如果我们放入字母 $c$，那么剩余 $n'-1$ 个位置以及 $k'-c$ 的数值之和，必须满足：

$$
n'-1 \leq k'-c \leq 26(n'-1)
$$

即：

$$
k'-26(n'-1) \leq c \leq k'-(n'-1)
$$

那么我们就得到了 $c$ 的取值下限 $k'-26(n'-1)$。因此：

- 如果 $k'-26(n'-1) \leq 0$，我们选择字符 $\texttt{a}$；

- 如果 $k'-26(n'-1) > 0$，我们选择该数值对应的字符。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    string getSmallestString(int n, int k) {
        string ans;
        for (int rest = n; rest >= 1; --rest) {
            int bound = k - 26 * (rest - 1);
            if (bound > 0) {
                ans += char(bound + 'a' - 1);
                k -= bound;
            }
            else {
                ans += 'a';
                k -= 1;
            }
        }
        return ans;
    }
};
```

* [sol1-Python3]

```Python
class Solution:
    def getSmallestString(self, n: int, k: int) -> str:
        ans = list()
        for rest in range(n, 0, -1):
            bound = k - 26 * (rest - 1)
            if bound > 0:
                ans.append(chr(bound + 96))
                k -= bound
            else:
                ans.append("a")
                k -= 1
        return "".join(ans)

```

**复杂度分析**

- 时间复杂度：$O(n)$。

- 空间复杂度：$O(1)$。

