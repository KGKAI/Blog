> Problem: [141. 环形链表](https://leetcode.cn/problems/linked-list-cycle/description/)

[TOC]

# 思路

> 代码使用了快慢指针的方法来检测链表中是否存在环。其基本思路是让一个指针每次移动一个节点，而另一个指针每次移动两个节点，如果存在环，两个指针最终会相遇。

# 解题方法

> ① 首先检查特殊情况，如果链表为空或者只有一个节点，则肯定不存在环，直接返回 false。
> ② 初始化快指针（fast）和慢指针（slow），分别指向链表的头节点和头节点的下一个节点。
> ③ 使用一个循环，不断移动指针，直到两个指针相遇或者快指针指向空节点。
> ④ 在每一次迭代中，慢指针向前移动一个节点，而快指针向前移动两个节点。
> ⑤ 如果快指针遇到了空节点，说明链表中没有环，直接返回 false。
> ⑥ 如果两个指针相遇，说明链表中存在环，返回 true。

# 复杂度

时间复杂度:

> 假设链表的长度为 n。快指针每次移动两步，慢指针每次移动一步，因此快指针会比慢指针多走环的长度。所以最坏情况下，时间复杂度为 O(n)。

空间复杂度:

> 这个算法使用了常量级别的额外空间，只需要几个指针来迭代链表，因此空间复杂度为 O(1)。

# Code

* []

```C++
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (head == nullptr || head->next == nullptr)
            return false;

        ListNode *slow = head;
        ListNode *fast = head->next;

        while (slow != fast) {
            if (fast == nullptr || fast->next == nullptr)
                return false;

            slow = slow->next;
            fast = fast->next->next;
        }

        return true;
    }
};
```

