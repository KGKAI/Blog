对于 $s=\texttt{cbacdcbc}$，从左到右遍历其中的字母。

1. $s[0]=\texttt{c}$。由于只遍历了一个字母，目前已知字典序最小的字符串是 $\texttt{c}$。
2. $s[1]=\texttt{b}$。如果右边没有字母 $\texttt{c}$，那么 $s[0]=\texttt{c}$ 必须保留；实际上右边还有字母 $\texttt{c}$，我们可以去掉 $\texttt{c}$，改用 $\texttt{b}$ 当作目前字典序最小的字符串。
3. $s[2]=\texttt{a}$。同样的，由于右边还有字母 $\texttt{b}$，我们可以去掉 $\texttt{b}$，改用 $\texttt{a}$ 当作目前字典序最小的字符串（下面记作 $\textit{ans}$）。
4. $s[3]=\texttt{c}$。由于 $\texttt{c}$ 比 $\texttt{a}$ 大，可以接在 $\texttt{a}$ 后面，目前 $\textit{ans}=\texttt{ac}$。
5. $s[4]=\texttt{d}$。由于 $\texttt{d}$ 比 $\texttt{c}$ 大，可以接在 $\texttt{c}$ 后面，目前 $\textit{ans}=\texttt{acd}$。
6. $s[5]=\texttt{c}$。由于 $\texttt{acd}$ 里面已经有 $\texttt{c}$ 了，直接跳过。目前 $\textit{ans}=\texttt{acd}$。
7. $s[6]=\texttt{b}$。我们发现 $\texttt{b}$ 比 $\texttt{d}$ 小，能不能像上面 $s[1]$ 和 $s[2]$ 那样，去掉 $\texttt{d}$ 替换成 $\texttt{b}$ 呢？这是不行的，因为后面没有 $\texttt{d}$ 了，我们只能老老实实地接在 $\texttt{d}$ 后面，目前 $\textit{ans}=\texttt{acdb}$。
8. $s[7]=\texttt{c}$。由于 $\texttt{acdb}$ 里面已经有 $\texttt{c}$ 了，直接跳过。

遍历完毕，我们得到了答案 $\textit{ans}=\texttt{acdb}$。

你可能会问，怎么知道右边是否还有某个字母 $x$？我们可以在遍历 $s$ 之前，先统计出每个字母的出现次数，记到一个哈希表或者数组 $\textit{left}$ 中。在遍历 $s$ 时，减少 $s[i]$ 的出现次数，也就是把 $\textit{left}[s[i]]$ 减一。如果发现 $\textit{left}[x]=0$ 就说明右边没有 $x$ 了。

具体算法如下：

1. 统计每个字母的出现次数，记到一个哈希表或者数组 $\textit{left}$ 中。
2. 遍历 $s$，先把 $\textit{left}[s[i]]$ 减一。
3. 如果 $s[i]$ 在 $\textit{ans}$ 中，直接 `continue`。为了快速判断 $s[i]$ 是否在 $\textit{ans}$ 中，可以创建一个哈希表或者布尔数组 $\textit{inAns}$。
4. 如果 $s[i]$ 不在 $\textit{ans}$ 中，那么判断 $s[i]$ 是否小于 $\textit{ans}$ 的最后一个字母（记作 $x$），如果 $s[i]<x$ 且 $\textit{left}[x]>0$，那么可以把 $x$ 从 $\textit{ans}$ 中去掉，同时标记 $\textit{inAns}[x]=\texttt{false}$。
5. 反复执行第 4 步，直到 $\textit{ans}$ 为空，或者 $s[i]>x$，或者 $\textit{left}[x]=0$。
6. 把 $s[i]$ 加到 $\textit{ans}$ 末尾，同时标记 $\textit{inAns}[s[i]]=\texttt{true}$。然后继续遍历 $s$ 的下一个字母。
7. 遍历完 $s$ 后，返回 $\textit{ans}$。

* [sol-Python3]

```py
class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        left = Counter(s)  # 统计每个字母的出现次数
        ans = []
        in_ans = set()
        for c in s:
            left[c] -= 1
            if c in in_ans:  # ans 中不能有重复字母
                continue
            # (设 x=ans[-1]) 如果 c < x，且右边还有 x，那么可以把 x 去掉，
            # 因为后面可以重新把 x 加到 ans 中
            while ans and c < ans[-1] and left[ans[-1]]:
                in_ans.remove(ans.pop())  # 标记 x 不在 ans 中
            ans.append(c)  # 把 c 加到 ans 的末尾
            in_ans.add(c)  # 标记 c 在 ans 中
        return ''.join(ans)
```

* [sol-Java]

```java
class Solution {
    public String removeDuplicateLetters(String S) {
        char[] s = S.toCharArray();
        int[] left = new int[26];
        for (char c : s)
            left[c - 'a']++; // 统计每个字母的出现次数
        StringBuilder ans = new StringBuilder(26);
        boolean[] inAns = new boolean[26];
        for (char c : s) {
            left[c - 'a']--;
            if (inAns[c - 'a']) // ans 中不能有重复字母
                continue;
            // 设 x = ans.charAt(ans.length() - 1)，
            // 如果 c < x，且右边还有 x，那么可以把 x 去掉，因为后面可以重新把 x 加到 ans 中
            while (!ans.isEmpty() && c < ans.charAt(ans.length() - 1) && left[ans.charAt(ans.length() - 1) - 'a'] > 0) {
                inAns[ans.charAt(ans.length() - 1) - 'a'] = false; // 标记 x 不在 ans 中
                ans.deleteCharAt(ans.length() - 1);
            }
            ans.append(c); // 把 c 加到 ans 的末尾
            inAns[c - 'a'] = true; // 标记 c 在 ans 中
        }
        return ans.toString();
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    string removeDuplicateLetters(string s) {
        vector<int> left(26), in_ans(26);
        for (char c: s)
            left[c - 'a']++; // 统计每个字母的出现次数
        string ans;
        for (char c: s) {
            left[c - 'a']--;
            if (in_ans[c - 'a']) // ans 中不能有重复字母
                continue;
            while (!ans.empty() && c < ans.back() && left[ans.back() - 'a']) {
                // (设 x=ans.back()) 如果 c < x，且右边还有 x，那么可以把 x 去掉，
                // 因为后面可以重新把 x 加到 ans 中
                in_ans[ans.back() - 'a'] = false; // 标记 x 不在 ans 中
                ans.pop_back();
            }
            ans += c; // 把 c 加到 ans 的末尾
            in_ans[c - 'a'] = true; // 标记 c 在 ans 中
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func removeDuplicateLetters(s string) string {
    left := ['z' + 1]int{} // 相比创建一个长为 26 的数组，多开一点空间更方便
    for _, c := range s {
        left[c]++ // 统计每个字母的出现次数
    }
    ans := []rune{}
    inAns := ['z' + 1]bool{}
    for _, c := range s {
        left[c]--
        if inAns[c] { // ans 中不能有重复字母
            continue
        }
        for len(ans) > 0 && c < ans[len(ans)-1] && left[ans[len(ans)-1]] > 0 {
            // 如果 c < x，且右边还有 x，那么可以把 x 去掉，因为后面可以重新把 x 加到 ans 中
            x := ans[len(ans)-1]
            ans = ans[:len(ans)-1]
            inAns[x] = false // 标记 x 不在 ans 中
        }
        ans = append(ans, c) // 把 c 加到 ans 的末尾
        inAns[c] = true // 标记 c 在 ans 中
    }
    return string(ans)
}
```

* [sol-JavaScript]

```js
var removeDuplicateLetters = function (s) {
    let left = _.countBy(s); // 统计每个字母的出现次数
    let ans = []
    let ansSet = new Set();
    for (const c of s) {
        left[c]--;
        if (ansSet.has(c)) // ans 中不能有重复字母
            continue;
        // 设 x = ans[ans.length-1]，
        // 如果 c < x，且右边还有 x，那么可以把 x 去掉，因为后面可以重新把 x 加到 ans 中
        while (ans && c < ans[ans.length - 1] && left[ans[ans.length - 1]])
            ansSet.delete(ans.pop()); // 标记 x 不在 ans 中
        ans.push(c); // 把 c 加到 ans 的末尾
        ansSet.add(c); // 标记 c 在 ans 中
    }
    return ans.join("");
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $s$ 的长度。我们写了一个二重循环，看上去是 $\mathcal{O}(n^2)$ 的，但是考虑到每个 $s[i]$ 加到 $\textit{ans}$ 中至多一次，从 $\textit{ans}$ 中去掉也至多一次。所以整体上看，算法的时间复杂度是 $\mathcal{O}(n)$ 的。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$，其中 $|\Sigma|$ 为字符集的大小，本题中字符均为小写字母，所以 $|\Sigma|=26$。注意 $\textit{ans}$ 的长度不会超过 $|\Sigma|$。

## 思考题

把问题改成：去掉尽量少的字母，且剩余的每种字母至多出现 $\textit{limit}$ 次。这里 $\textit{limit}$ 是额外输入的一个正整数（本题相当于 $\textit{limit}=1$）。

这题是力扣之前的比赛题 [天池-03. 整理书架](https://leetcode.cn/contest/tianchi2022/problems/ev2bru/)。

欢迎在评论区发表你的做法。

---

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
