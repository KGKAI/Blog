### 解题思路

![屏幕截图(85).png](https://pic.leetcode-cn.com/09463d915a969289cd371c66011345f3576a9081c2139c9ab67b2a4d2531716a-%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE(85).png)

### 代码

* c

```c
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) {
    // 相当于物理中的追击问题，只要有环路，则二者必会相遇
    if (!head) {
        return false;
    }
    // 快慢指针
    struct ListNode *slow = head, *fast = head->next;

    while(fast != slow) {
        if ( !fast || !(fast->next) ) {       // fast就是尾部，或者fast的下一个是尾部，说明走到头了，没有环路
            return false;
        } else {
            slow = slow->next;              // slow走一步
            fast = fast->next->next;        // fast走两步
        }
    }

    return true;
}
```

