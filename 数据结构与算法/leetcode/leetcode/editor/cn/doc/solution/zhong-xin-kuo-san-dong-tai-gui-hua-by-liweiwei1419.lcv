**说明**：本题解是 [官方题解](https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/) 中的视频讲解的文字补充。

### 方法一：暴力解法

+ 根据回文子串的定义，枚举所有长度大于等于 $2$ 的子串，依次判断它们是否是回文；
+ 可以只针对大于「当前得到的最长回文子串长度」的子串进行回文验证；
+ 当得到了一个更长的回文时，不需要真的做截取。只需要记录「当前子串的起始位置」和「子串长度」。

**参考代码 1**：

* []

```Java
public class Solution {

    public String longestPalindrome(String s) {
        int len = s.length();
        if (len < 2) {
            return s;
        }

        int maxLen = 1;
        int begin = 0;
        // s.charAt(i) 每次都会检查数组下标越界，因此先转换成字符数组
        char[] charArray = s.toCharArray();

        // 枚举所有长度大于 1 的子串 charArray[i..j]
        for (int i = 0; i < len - 1; i++) {
            for (int j = i + 1; j < len; j++) {
                if (j - i + 1 > maxLen && validPalindromic(charArray, i, j)) {
                    maxLen = j - i + 1;
                    begin = i;
                }
            }
        }
        return s.substring(begin, begin + maxLen);
    }

    /**
     * 验证子串 s[left..right] 是否为回文串
     */
    private boolean validPalindromic(char[] charArray, int left, int right) {
        while (left < right) {
            if (charArray[left] != charArray[right]) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
```

**复杂度分析**：

+ 时间复杂度：$O(N^3)$，这里 $N$ 是字符串的长度，枚举字符串的左边界、右边界，然后继续验证子串是否是回文子串，都与 $N$ 相关；
+ 空间复杂度：$O(1)$，只使用到常数个临时变量，与字符串长度无关。

---

### 方法二：动态规划

回文天然具有「状态转移」性质：一个长度严格大于 $2$ 的回文去掉头尾字符以后，剩下的部分依然是回文。反之，如果一个字符串头尾两个字符都不相等，那么这个字符串一定不是回文。「动态规划」的方法根据这样的性质得到。

#### 第 1 步：定义状态

`dp[i][j]` 表示：子串 `s[i..j]` 是否为回文子串，这里子串 `s[i..j]` 定义为左闭右闭区间，即可以取到 `s[i]` 和 `s[j]`。

#### 第 2 步：思考状态转移方程

根据头尾字符是否相等，需要分类讨论：

* java

```java
dp[i][j] = (s[i] == s[j]) and dp[i + 1][j - 1]
```

**说明**：

+ 「动态规划」的「自底向上」求解问题的思路，很多时候是在填写一张二维表格。由于 `s[i..j]` 表示 `s` 的一个子串，因此 `i` 和 `j` 的关系是 `i <= j`，只需要填这张表格对角线以上的部分；
+ 看到 `dp[i + 1][j - 1]` 就需要考虑特殊情况：如果去掉 `s[i..j]` 头尾两个字符子串 `s[i + 1..j - 1]` 的长度严格小于 $2$（不构成区间），即 $j - 1 - (i + 1) + 1 < 2$ 时，整理得 $j - i < 3$，此时 `s[i..j]` 是否是回文只取决于 `s[i]` 与 `s[j]` 是否相等。结论也比较直观：$j - i < 3$ 等价于 $j - i + 1 < 4$，即当子串 $s[i..j]$ 的长度等于 $2$ 或者等于 $3$ 的时候，`s[i..j]` 是否是回文由 `s[i]` 与 `s[j]` 是否相等决定。

#### 第 3 步：考虑初始化

单个字符一定是回文串，因此把对角线先初始化为 `true`，即 `dp[i][i] = true`。根据第 2 步的说明：当 `s[i..j]` 的长度为 $2$ 时，只需要判断 `s[i]` 是否等于 `s[j]`，所以二维表格对角线上的数值不会被参考。所以不设置 `dp[i][i] = true` 也能得到正确结论。

#### 第 4 步：考虑输出

一旦得到 `dp[i][j] = true`，就记录子串的「长度」和「起始位置」。没有必要截取，这是因为截取字符串也有性能消耗。

#### 第 5 步：考虑优化空间

+ 下面给出的「参考代码」，在填表的过程中，只参考了左下方的数值。事实上可以优化，但是增加了代码编写和理解的难度，丢失了可读性和可解释性。在这里不做优化空间；
+ 填表应该遵守这样的原则：总是先得到小子串是否是回文的结果，然后大子串才能参考小子串的判断结果，所以填表顺序很重要；
+ 建议自己动手，画一下表格，相信会对「动态规划」作为一种「表格法」有更好的理解。

**参考代码 2**：

* []

```Java
public class Solution {

    public String longestPalindrome(String s) {
        // 特殊用例判断
        int len = s.length();
        if (len < 2) {
            return s;
        }

        int maxLen = 1;
        int begin = 0;

        // dp[i][j] 表示 s[i, j] 是否是回文串
        boolean[][] dp = new boolean[len][len];
        char[] charArray = s.toCharArray();

        for (int i = 0; i < len; i++) {
            dp[i][i] = true;
        }
        for (int j = 1; j < len; j++) {
            for (int i = 0; i < j; i++) {
                if (charArray[i] != charArray[j]) {
                    dp[i][j] = false;
                } else {
                    if (j - i < 3) {
                        dp[i][j] = true;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                }

                // 只要 dp[i][j] == true 成立，就表示子串 s[i..j] 是回文，此时记录回文长度和起始位置
                if (dp[i][j] && j - i + 1 > maxLen) {
                    maxLen = j - i + 1;
                    begin = i;
                }
            }
        }
        return s.substring(begin, begin + maxLen);
    }
}
```

**复杂度分析**：

- 时间复杂度：$O(N^{2})$，这里 $N$ 是字符串的长度；
- 空间复杂度：$O(N^{2})$，使用了一张二维表格记录所有可能的情况，因此空间复杂度是 $O(N^{2})$。

---

「暴力法」和「动态规划」枚举了字符串的左右边界，我们还可以 **枚举可能出现的回文子串的「中心位置」，从「中心位置」尝试尽可能向两边，得到回文串**。

### 方法三：中心扩散法

「中心扩散法」的基本思想是：遍历每一个下标，以这个下标为中心，利用「回文串」中心对称的特点，往两边扩散，看最多能扩散多远。

枚举「中心位置」时间复杂度为 $O(N)$，从「中心位置」扩散得到「回文子串」的时间复杂度为 $O(N)$，因此时间复杂度可以降到 $O(N^2)$。

**细节**：回文串在长度为奇数和偶数的时候，「回文中心」的形态不一样：

- 奇数回文串的「中心」是一个具体的字符，例如：回文串 `"aba"` 的中心是字符 `"b"`；
- 偶数回文串的「中心」是位于中间的两个字符的「空隙」，例如：回文串 `"abba"` 的中心是两个 `"b"`，也可以看成两个 `"b"` 中间的空隙。

![image.png](https://pic.leetcode-cn.com/1617703338-JVaHRZ-image.png)

我们看一下一个字符串可能的回文子串的中心在哪里？

![image.png](https://pic.leetcode-cn.com/1617703406-EtKaXI-image.png){:style="width:400px"}

我们可以设计一个方法，兼容以上两种情况：

+ 如果传入重合的下标，进行中心扩散，此时得到的回文子串的长度是奇数；
+ 如果传入相邻的下标，进行中心扩散，此时得到的回文子串的长度是偶数。

具体编码细节请见「参考代码 3」注释。

**参考代码 3**：

* []

```Java
public class Solution {

    public String longestPalindrome(String s) {
        int len = s.length();
        if(len < 2) return s;
        
        int maxLen = 0;
        // 数组第一位记录起始位置，第二位记录长度
        int[] res = new int[2];
        for (int i = 0; i < s.length() - 1; i++) {
            int[] odd = centerSpread(s, i, i);
            int[] even = centerSpread(s, i, i + 1);
            int[] max = odd[1] > even[1] ? odd : even;
            if (max[1] > maxLen) {
                res = max;
                maxLen = max[1];
            }
        }
        return s.substring(res[0], res[0] + res[1]);
    }

    private int[] centerSpread(String s, int left, int right) {
        int len = s.length();
        while (left >= 0 && right < len) {
            if (s.charAt(left) == s.charAt(right)) {
                left--;
                right++;
            } else {
                break;
            }
        }
        return new int[]{left + 1, right - left - 1};
    }
}
```

**复杂度分析**：

+ 时间复杂度：$O(N^{2})$，这里 $N$ 是字符串的长度；
+ 空间复杂度：$O(1)$，只使用到常数个临时变量，与字符串长度无关。

